name: ${APP_NAME}
services:
  api-init:
    # init container to run database migrations
    image: migrate/migrate
    volumes:
        - ./migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${APP_NAME}?sslmode=disable", "-verbose", "up"]
    depends_on:
      db:
        condition: service_healthy
  game-api:
    build: .
    ports:
      - 127.0.0.1:8080:8080
    volumes:
      - .:/app
    depends_on:
      api-init:
        condition: service_completed_successfully
    environment:
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USER=${DB_USER}
      - DB_DATABASE=${APP_NAME}
      - APP_NAME=${APP_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
  db:
    image: postgres
    ports:
      - 127.0.0.1:${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_DB=${APP_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      # PGUSER is secret sauce to get the healthcheck to work
      #   without it, pg_isready tries to connect as current linux user (root)
      #   and fails
      - PGUSER=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "game"]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 5s